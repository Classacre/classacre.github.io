name: E2E Tests

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

jobs:
  e2e:
    name: Playwright E2E (simulated provider)
    runs-on: ubuntu-latest
    env:
      PLAYWRIGHT_TESTING: "true"
      PLAYWRIGHT_BASE_URL: "http://localhost:3000"
      # Provide required secrets in repository secrets for CI runs
      DATABASE_URL: ${{ secrets.DATABASE_URL }}
      REDIS_URL: ${{ secrets.REDIS_URL }}
      FIELD_ENCRYPTION_KEY: ${{ secrets.FIELD_ENCRYPTION_KEY }}
      ELEVENLABS_API_KEY: ${{ secrets.ELEVENLABS_API_KEY || '' }}
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 20
          cache: 'pnpm'

      - name: Install pnpm
        run: |
          corepack enable
          corepack prepare pnpm@latest --activate
          pnpm -v

      - name: Install dependencies
        run: pnpm install

      - name: Generate Prisma client
        working-directory: backend
        run: pnpm exec npx prisma generate --schema=backend/prisma/schema.prisma

      - name: Start backend (dev) and workers (background)
        run: |
          # Start backend in background. Use dev server for quick iteration.
          pnpm -C backend dev -- --port 3000 > backend.log 2>&1 &
          # Start voice worker and embeddings worker in background. Workers will simulate provider calls if ELEVENLABS_API_KEY is not set.
          pnpm -C backend exec node -r ts-node/register ./backend/src/worker/voiceWorker.ts > voiceWorker.log 2>&1 &
          pnpm -C backend exec node -r ts-node/register ./backend/src/worker/embeddingsWorker.ts > embeddingsWorker.log 2>&1 &
          # Wait for the backend to become available (simple sleep to allow boot).
          echo "Waiting for backend to boot..."
          sleep 8

      - name: Install Playwright browsers
        run: |
          pnpm -w add -D @playwright/test playwright || true
          npx playwright install --with-deps

      - name: Run Playwright tests
        env:
          PLAYWRIGHT_TESTING: "true"
          PLAYWRIGHT_BASE_URL: "http://localhost:3000"
        run: |
          npx playwright test --reporter=list

      - name: Upload Playwright HTML report (if exists)
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: playwright-report
          path: playwright-report