"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
exports.id = "vendor-chunks/@openrouter+ai-sdk-provider_cc067f969ca6f2d6fe755f9c943e4cee";
exports.ids = ["vendor-chunks/@openrouter+ai-sdk-provider_cc067f969ca6f2d6fe755f9c943e4cee"];
exports.modules = {

/***/ "(rsc)/../node_modules/.pnpm/@openrouter+ai-sdk-provider_cc067f969ca6f2d6fe755f9c943e4cee/node_modules/@openrouter/ai-sdk-provider/dist/index.mjs":
/*!**************************************************************************************************************************************************!*\
  !*** ../node_modules/.pnpm/@openrouter+ai-sdk-provider_cc067f969ca6f2d6fe755f9c943e4cee/node_modules/@openrouter/ai-sdk-provider/dist/index.mjs ***!
  \**************************************************************************************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   OpenRouter: () => (/* binding */ OpenRouter),\n/* harmony export */   createOpenRouter: () => (/* binding */ createOpenRouter),\n/* harmony export */   openrouter: () => (/* binding */ openrouter)\n/* harmony export */ });\n/* harmony import */ var zod_v4__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! zod/v4 */ \"(rsc)/../node_modules/.pnpm/zod@4.0.17/node_modules/zod/v4/classic/schemas.js\");\nvar __defProp = Object.defineProperty;\nvar __defProps = Object.defineProperties;\nvar __getOwnPropDescs = Object.getOwnPropertyDescriptors;\nvar __getOwnPropSymbols = Object.getOwnPropertySymbols;\nvar __hasOwnProp = Object.prototype.hasOwnProperty;\nvar __propIsEnum = Object.prototype.propertyIsEnumerable;\nvar __defNormalProp = (obj, key, value) => key in obj ? __defProp(obj, key, { enumerable: true, configurable: true, writable: true, value }) : obj[key] = value;\nvar __spreadValues = (a, b) => {\n  for (var prop in b || (b = {}))\n    if (__hasOwnProp.call(b, prop))\n      __defNormalProp(a, prop, b[prop]);\n  if (__getOwnPropSymbols)\n    for (var prop of __getOwnPropSymbols(b)) {\n      if (__propIsEnum.call(b, prop))\n        __defNormalProp(a, prop, b[prop]);\n    }\n  return a;\n};\nvar __spreadProps = (a, b) => __defProps(a, __getOwnPropDescs(b));\n\n// node_modules/.pnpm/@ai-sdk+provider@2.0.0/node_modules/@ai-sdk/provider/dist/index.mjs\nvar marker = \"vercel.ai.error\";\nvar symbol = Symbol.for(marker);\nvar _a;\nvar _AISDKError = class _AISDKError2 extends Error {\n  /**\n   * Creates an AI SDK Error.\n   *\n   * @param {Object} params - The parameters for creating the error.\n   * @param {string} params.name - The name of the error.\n   * @param {string} params.message - The error message.\n   * @param {unknown} [params.cause] - The underlying cause of the error.\n   */\n  constructor({\n    name: name14,\n    message,\n    cause\n  }) {\n    super(message);\n    this[_a] = true;\n    this.name = name14;\n    this.cause = cause;\n  }\n  /**\n   * Checks if the given error is an AI SDK Error.\n   * @param {unknown} error - The error to check.\n   * @returns {boolean} True if the error is an AI SDK Error, false otherwise.\n   */\n  static isInstance(error) {\n    return _AISDKError2.hasMarker(error, marker);\n  }\n  static hasMarker(error, marker15) {\n    const markerSymbol = Symbol.for(marker15);\n    return error != null && typeof error === \"object\" && markerSymbol in error && typeof error[markerSymbol] === \"boolean\" && error[markerSymbol] === true;\n  }\n};\n_a = symbol;\nvar AISDKError = _AISDKError;\nvar name = \"AI_APICallError\";\nvar marker2 = `vercel.ai.error.${name}`;\nvar symbol2 = Symbol.for(marker2);\nvar _a2;\nvar APICallError = class extends AISDKError {\n  constructor({\n    message,\n    url,\n    requestBodyValues,\n    statusCode,\n    responseHeaders,\n    responseBody,\n    cause,\n    isRetryable = statusCode != null && (statusCode === 408 || // request timeout\n    statusCode === 409 || // conflict\n    statusCode === 429 || // too many requests\n    statusCode >= 500),\n    // server error\n    data\n  }) {\n    super({ name, message, cause });\n    this[_a2] = true;\n    this.url = url;\n    this.requestBodyValues = requestBodyValues;\n    this.statusCode = statusCode;\n    this.responseHeaders = responseHeaders;\n    this.responseBody = responseBody;\n    this.isRetryable = isRetryable;\n    this.data = data;\n  }\n  static isInstance(error) {\n    return AISDKError.hasMarker(error, marker2);\n  }\n};\n_a2 = symbol2;\nvar name2 = \"AI_EmptyResponseBodyError\";\nvar marker3 = `vercel.ai.error.${name2}`;\nvar symbol3 = Symbol.for(marker3);\nvar _a3;\nvar EmptyResponseBodyError = class extends AISDKError {\n  // used in isInstance\n  constructor({ message = \"Empty response body\" } = {}) {\n    super({ name: name2, message });\n    this[_a3] = true;\n  }\n  static isInstance(error) {\n    return AISDKError.hasMarker(error, marker3);\n  }\n};\n_a3 = symbol3;\nfunction getErrorMessage(error) {\n  if (error == null) {\n    return \"unknown error\";\n  }\n  if (typeof error === \"string\") {\n    return error;\n  }\n  if (error instanceof Error) {\n    return error.message;\n  }\n  return JSON.stringify(error);\n}\nvar name3 = \"AI_InvalidArgumentError\";\nvar marker4 = `vercel.ai.error.${name3}`;\nvar symbol4 = Symbol.for(marker4);\nvar _a4;\nvar InvalidArgumentError = class extends AISDKError {\n  constructor({\n    message,\n    cause,\n    argument\n  }) {\n    super({ name: name3, message, cause });\n    this[_a4] = true;\n    this.argument = argument;\n  }\n  static isInstance(error) {\n    return AISDKError.hasMarker(error, marker4);\n  }\n};\n_a4 = symbol4;\nvar name4 = \"AI_InvalidPromptError\";\nvar marker5 = `vercel.ai.error.${name4}`;\nvar symbol5 = Symbol.for(marker5);\nvar _a5;\nvar InvalidPromptError = class extends AISDKError {\n  constructor({\n    prompt,\n    message,\n    cause\n  }) {\n    super({ name: name4, message: `Invalid prompt: ${message}`, cause });\n    this[_a5] = true;\n    this.prompt = prompt;\n  }\n  static isInstance(error) {\n    return AISDKError.hasMarker(error, marker5);\n  }\n};\n_a5 = symbol5;\nvar name5 = \"AI_InvalidResponseDataError\";\nvar marker6 = `vercel.ai.error.${name5}`;\nvar symbol6 = Symbol.for(marker6);\nvar _a6;\nvar InvalidResponseDataError = class extends AISDKError {\n  constructor({\n    data,\n    message = `Invalid response data: ${JSON.stringify(data)}.`\n  }) {\n    super({ name: name5, message });\n    this[_a6] = true;\n    this.data = data;\n  }\n  static isInstance(error) {\n    return AISDKError.hasMarker(error, marker6);\n  }\n};\n_a6 = symbol6;\nvar name6 = \"AI_JSONParseError\";\nvar marker7 = `vercel.ai.error.${name6}`;\nvar symbol7 = Symbol.for(marker7);\nvar _a7;\nvar JSONParseError = class extends AISDKError {\n  constructor({ text, cause }) {\n    super({\n      name: name6,\n      message: `JSON parsing failed: Text: ${text}.\nError message: ${getErrorMessage(cause)}`,\n      cause\n    });\n    this[_a7] = true;\n    this.text = text;\n  }\n  static isInstance(error) {\n    return AISDKError.hasMarker(error, marker7);\n  }\n};\n_a7 = symbol7;\nvar name7 = \"AI_LoadAPIKeyError\";\nvar marker8 = `vercel.ai.error.${name7}`;\nvar symbol8 = Symbol.for(marker8);\nvar _a8;\nvar LoadAPIKeyError = class extends AISDKError {\n  // used in isInstance\n  constructor({ message }) {\n    super({ name: name7, message });\n    this[_a8] = true;\n  }\n  static isInstance(error) {\n    return AISDKError.hasMarker(error, marker8);\n  }\n};\n_a8 = symbol8;\nvar name8 = \"AI_LoadSettingError\";\nvar marker9 = `vercel.ai.error.${name8}`;\nvar symbol9 = Symbol.for(marker9);\nvar _a9;\n_a9 = symbol9;\nvar name9 = \"AI_NoContentGeneratedError\";\nvar marker10 = `vercel.ai.error.${name9}`;\nvar symbol10 = Symbol.for(marker10);\nvar _a10;\n_a10 = symbol10;\nvar name10 = \"AI_NoSuchModelError\";\nvar marker11 = `vercel.ai.error.${name10}`;\nvar symbol11 = Symbol.for(marker11);\nvar _a11;\n_a11 = symbol11;\nvar name11 = \"AI_TooManyEmbeddingValuesForCallError\";\nvar marker12 = `vercel.ai.error.${name11}`;\nvar symbol12 = Symbol.for(marker12);\nvar _a12;\n_a12 = symbol12;\nvar name12 = \"AI_TypeValidationError\";\nvar marker13 = `vercel.ai.error.${name12}`;\nvar symbol13 = Symbol.for(marker13);\nvar _a13;\nvar _TypeValidationError = class _TypeValidationError2 extends AISDKError {\n  constructor({ value, cause }) {\n    super({\n      name: name12,\n      message: `Type validation failed: Value: ${JSON.stringify(value)}.\nError message: ${getErrorMessage(cause)}`,\n      cause\n    });\n    this[_a13] = true;\n    this.value = value;\n  }\n  static isInstance(error) {\n    return AISDKError.hasMarker(error, marker13);\n  }\n  /**\n   * Wraps an error into a TypeValidationError.\n   * If the cause is already a TypeValidationError with the same value, it returns the cause.\n   * Otherwise, it creates a new TypeValidationError.\n   *\n   * @param {Object} params - The parameters for wrapping the error.\n   * @param {unknown} params.value - The value that failed validation.\n   * @param {unknown} params.cause - The original error or cause of the validation failure.\n   * @returns {TypeValidationError} A TypeValidationError instance.\n   */\n  static wrap({\n    value,\n    cause\n  }) {\n    return _TypeValidationError2.isInstance(cause) && cause.value === value ? cause : new _TypeValidationError2({ value, cause });\n  }\n};\n_a13 = symbol13;\nvar TypeValidationError = _TypeValidationError;\nvar name13 = \"AI_UnsupportedFunctionalityError\";\nvar marker14 = `vercel.ai.error.${name13}`;\nvar symbol14 = Symbol.for(marker14);\nvar _a14;\nvar UnsupportedFunctionalityError = class extends AISDKError {\n  constructor({\n    functionality,\n    message = `'${functionality}' functionality not supported.`\n  }) {\n    super({ name: name13, message });\n    this[_a14] = true;\n    this.functionality = functionality;\n  }\n  static isInstance(error) {\n    return AISDKError.hasMarker(error, marker14);\n  }\n};\n_a14 = symbol14;\n\n// node_modules/.pnpm/eventsource-parser@3.0.3/node_modules/eventsource-parser/dist/index.js\nvar ParseError = class extends Error {\n  constructor(message, options) {\n    super(message), this.name = \"ParseError\", this.type = options.type, this.field = options.field, this.value = options.value, this.line = options.line;\n  }\n};\nfunction noop(_arg) {\n}\nfunction createParser(callbacks) {\n  if (typeof callbacks == \"function\")\n    throw new TypeError(\n      \"`callbacks` must be an object, got a function instead. Did you mean `{onEvent: fn}`?\"\n    );\n  const { onEvent = noop, onError = noop, onRetry = noop, onComment } = callbacks;\n  let incompleteLine = \"\", isFirstChunk = true, id, data = \"\", eventType = \"\";\n  function feed(newChunk) {\n    const chunk = isFirstChunk ? newChunk.replace(/^\\xEF\\xBB\\xBF/, \"\") : newChunk, [complete, incomplete] = splitLines(`${incompleteLine}${chunk}`);\n    for (const line of complete)\n      parseLine(line);\n    incompleteLine = incomplete, isFirstChunk = false;\n  }\n  function parseLine(line) {\n    if (line === \"\") {\n      dispatchEvent();\n      return;\n    }\n    if (line.startsWith(\":\")) {\n      onComment && onComment(line.slice(line.startsWith(\": \") ? 2 : 1));\n      return;\n    }\n    const fieldSeparatorIndex = line.indexOf(\":\");\n    if (fieldSeparatorIndex !== -1) {\n      const field = line.slice(0, fieldSeparatorIndex), offset = line[fieldSeparatorIndex + 1] === \" \" ? 2 : 1, value = line.slice(fieldSeparatorIndex + offset);\n      processField(field, value, line);\n      return;\n    }\n    processField(line, \"\", line);\n  }\n  function processField(field, value, line) {\n    switch (field) {\n      case \"event\":\n        eventType = value;\n        break;\n      case \"data\":\n        data = `${data}${value}\n`;\n        break;\n      case \"id\":\n        id = value.includes(\"\\0\") ? void 0 : value;\n        break;\n      case \"retry\":\n        /^\\d+$/.test(value) ? onRetry(parseInt(value, 10)) : onError(\n          new ParseError(`Invalid \\`retry\\` value: \"${value}\"`, {\n            type: \"invalid-retry\",\n            value,\n            line\n          })\n        );\n        break;\n      default:\n        onError(\n          new ParseError(\n            `Unknown field \"${field.length > 20 ? `${field.slice(0, 20)}\\u2026` : field}\"`,\n            { type: \"unknown-field\", field, value, line }\n          )\n        );\n        break;\n    }\n  }\n  function dispatchEvent() {\n    data.length > 0 && onEvent({\n      id,\n      event: eventType || void 0,\n      // If the data buffer's last character is a U+000A LINE FEED (LF) character,\n      // then remove the last character from the data buffer.\n      data: data.endsWith(`\n`) ? data.slice(0, -1) : data\n    }), id = void 0, data = \"\", eventType = \"\";\n  }\n  function reset(options = {}) {\n    incompleteLine && options.consume && parseLine(incompleteLine), isFirstChunk = true, id = void 0, data = \"\", eventType = \"\", incompleteLine = \"\";\n  }\n  return { feed, reset };\n}\nfunction splitLines(chunk) {\n  const lines = [];\n  let incompleteLine = \"\", searchIndex = 0;\n  for (; searchIndex < chunk.length; ) {\n    const crIndex = chunk.indexOf(\"\\r\", searchIndex), lfIndex = chunk.indexOf(`\n`, searchIndex);\n    let lineEnd = -1;\n    if (crIndex !== -1 && lfIndex !== -1 ? lineEnd = Math.min(crIndex, lfIndex) : crIndex !== -1 ? lineEnd = crIndex : lfIndex !== -1 && (lineEnd = lfIndex), lineEnd === -1) {\n      incompleteLine = chunk.slice(searchIndex);\n      break;\n    } else {\n      const line = chunk.slice(searchIndex, lineEnd);\n      lines.push(line), searchIndex = lineEnd + 1, chunk[searchIndex - 1] === \"\\r\" && chunk[searchIndex] === `\n` && searchIndex++;\n    }\n  }\n  return [lines, incompleteLine];\n}\n\n// node_modules/.pnpm/eventsource-parser@3.0.3/node_modules/eventsource-parser/dist/stream.js\nvar EventSourceParserStream = class extends TransformStream {\n  constructor({ onError, onRetry, onComment } = {}) {\n    let parser;\n    super({\n      start(controller) {\n        parser = createParser({\n          onEvent: (event) => {\n            controller.enqueue(event);\n          },\n          onError(error) {\n            onError === \"terminate\" ? controller.error(error) : typeof onError == \"function\" && onError(error);\n          },\n          onRetry,\n          onComment\n        });\n      },\n      transform(chunk) {\n        parser.feed(chunk);\n      }\n    });\n  }\n};\n\n// node_modules/.pnpm/@ai-sdk+provider-utils@3.0.1_zod@3.25.76/node_modules/@ai-sdk/provider-utils/dist/index.mjs\n\n\n// node_modules/.pnpm/zod-to-json-schema@3.24.6_zod@3.25.76/node_modules/zod-to-json-schema/dist/esm/Options.js\nvar ignoreOverride = Symbol(\"Let zodToJsonSchema decide on which parser to use\");\n\n// node_modules/.pnpm/zod-to-json-schema@3.24.6_zod@3.25.76/node_modules/zod-to-json-schema/dist/esm/selectParser.js\n\n\n// node_modules/.pnpm/zod-to-json-schema@3.24.6_zod@3.25.76/node_modules/zod-to-json-schema/dist/esm/parsers/array.js\n\n\n// node_modules/.pnpm/zod-to-json-schema@3.24.6_zod@3.25.76/node_modules/zod-to-json-schema/dist/esm/parsers/record.js\n\n\n// node_modules/.pnpm/zod-to-json-schema@3.24.6_zod@3.25.76/node_modules/zod-to-json-schema/dist/esm/parsers/string.js\nvar ALPHA_NUMERIC = new Set(\"ABCDEFGHIJKLMNOPQRSTUVXYZabcdefghijklmnopqrstuvxyz0123456789\");\n\n// node_modules/.pnpm/@ai-sdk+provider-utils@3.0.1_zod@3.25.76/node_modules/@ai-sdk/provider-utils/dist/index.mjs\nfunction combineHeaders(...headers) {\n  return headers.reduce(\n    (combinedHeaders, currentHeaders) => __spreadValues(__spreadValues({}, combinedHeaders), currentHeaders != null ? currentHeaders : {}),\n    {}\n  );\n}\nfunction extractResponseHeaders(response) {\n  return Object.fromEntries([...response.headers]);\n}\nvar createIdGenerator = ({\n  prefix,\n  size = 16,\n  alphabet = \"0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz\",\n  separator = \"-\"\n} = {}) => {\n  const generator = () => {\n    const alphabetLength = alphabet.length;\n    const chars = new Array(size);\n    for (let i = 0; i < size; i++) {\n      chars[i] = alphabet[Math.random() * alphabetLength | 0];\n    }\n    return chars.join(\"\");\n  };\n  if (prefix == null) {\n    return generator;\n  }\n  if (alphabet.includes(separator)) {\n    throw new InvalidArgumentError({\n      argument: \"separator\",\n      message: `The separator \"${separator}\" must not be part of the alphabet \"${alphabet}\".`\n    });\n  }\n  return () => `${prefix}${separator}${generator()}`;\n};\nvar generateId = createIdGenerator();\nfunction isAbortError(error) {\n  return (error instanceof Error || error instanceof DOMException) && (error.name === \"AbortError\" || error.name === \"ResponseAborted\" || // Next.js\n  error.name === \"TimeoutError\");\n}\nvar FETCH_FAILED_ERROR_MESSAGES = [\"fetch failed\", \"failed to fetch\"];\nfunction handleFetchError({\n  error,\n  url,\n  requestBodyValues\n}) {\n  if (isAbortError(error)) {\n    return error;\n  }\n  if (error instanceof TypeError && FETCH_FAILED_ERROR_MESSAGES.includes(error.message.toLowerCase())) {\n    const cause = error.cause;\n    if (cause != null) {\n      return new APICallError({\n        message: `Cannot connect to API: ${cause.message}`,\n        cause,\n        url,\n        requestBodyValues,\n        isRetryable: true\n        // retry when network error\n      });\n    }\n  }\n  return error;\n}\nfunction removeUndefinedEntries(record) {\n  return Object.fromEntries(\n    Object.entries(record).filter(([_key, value]) => value != null)\n  );\n}\nfunction loadApiKey({\n  apiKey,\n  environmentVariableName,\n  apiKeyParameterName = \"apiKey\",\n  description\n}) {\n  if (typeof apiKey === \"string\") {\n    return apiKey;\n  }\n  if (apiKey != null) {\n    throw new LoadAPIKeyError({\n      message: `${description} API key must be a string.`\n    });\n  }\n  if (typeof process === \"undefined\") {\n    throw new LoadAPIKeyError({\n      message: `${description} API key is missing. Pass it using the '${apiKeyParameterName}' parameter. Environment variables is not supported in this environment.`\n    });\n  }\n  apiKey = process.env[environmentVariableName];\n  if (apiKey == null) {\n    throw new LoadAPIKeyError({\n      message: `${description} API key is missing. Pass it using the '${apiKeyParameterName}' parameter or the ${environmentVariableName} environment variable.`\n    });\n  }\n  if (typeof apiKey !== \"string\") {\n    throw new LoadAPIKeyError({\n      message: `${description} API key must be a string. The value of the ${environmentVariableName} environment variable is not a string.`\n    });\n  }\n  return apiKey;\n}\nvar suspectProtoRx = /\"__proto__\"\\s*:/;\nvar suspectConstructorRx = /\"constructor\"\\s*:/;\nfunction _parse(text) {\n  const obj = JSON.parse(text);\n  if (obj === null || typeof obj !== \"object\") {\n    return obj;\n  }\n  if (suspectProtoRx.test(text) === false && suspectConstructorRx.test(text) === false) {\n    return obj;\n  }\n  return filter(obj);\n}\nfunction filter(obj) {\n  let next = [obj];\n  while (next.length) {\n    const nodes = next;\n    next = [];\n    for (const node of nodes) {\n      if (Object.prototype.hasOwnProperty.call(node, \"__proto__\")) {\n        throw new SyntaxError(\"Object contains forbidden prototype property\");\n      }\n      if (Object.prototype.hasOwnProperty.call(node, \"constructor\") && Object.prototype.hasOwnProperty.call(node.constructor, \"prototype\")) {\n        throw new SyntaxError(\"Object contains forbidden prototype property\");\n      }\n      for (const key in node) {\n        const value = node[key];\n        if (value && typeof value === \"object\") {\n          next.push(value);\n        }\n      }\n    }\n  }\n  return obj;\n}\nfunction secureJsonParse(text) {\n  const { stackTraceLimit } = Error;\n  Error.stackTraceLimit = 0;\n  try {\n    return _parse(text);\n  } finally {\n    Error.stackTraceLimit = stackTraceLimit;\n  }\n}\nvar validatorSymbol = Symbol.for(\"vercel.ai.validator\");\nfunction validator(validate) {\n  return { [validatorSymbol]: true, validate };\n}\nfunction isValidator(value) {\n  return typeof value === \"object\" && value !== null && validatorSymbol in value && value[validatorSymbol] === true && \"validate\" in value;\n}\nfunction asValidator(value) {\n  return isValidator(value) ? value : standardSchemaValidator(value);\n}\nfunction standardSchemaValidator(standardSchema) {\n  return validator(async (value) => {\n    const result = await standardSchema[\"~standard\"].validate(value);\n    return result.issues == null ? { success: true, value: result.value } : {\n      success: false,\n      error: new TypeValidationError({\n        value,\n        cause: result.issues\n      })\n    };\n  });\n}\nasync function validateTypes({\n  value,\n  schema\n}) {\n  const result = await safeValidateTypes({ value, schema });\n  if (!result.success) {\n    throw TypeValidationError.wrap({ value, cause: result.error });\n  }\n  return result.value;\n}\nasync function safeValidateTypes({\n  value,\n  schema\n}) {\n  const validator2 = asValidator(schema);\n  try {\n    if (validator2.validate == null) {\n      return { success: true, value, rawValue: value };\n    }\n    const result = await validator2.validate(value);\n    if (result.success) {\n      return { success: true, value: result.value, rawValue: value };\n    }\n    return {\n      success: false,\n      error: TypeValidationError.wrap({ value, cause: result.error }),\n      rawValue: value\n    };\n  } catch (error) {\n    return {\n      success: false,\n      error: TypeValidationError.wrap({ value, cause: error }),\n      rawValue: value\n    };\n  }\n}\nasync function parseJSON({\n  text,\n  schema\n}) {\n  try {\n    const value = secureJsonParse(text);\n    if (schema == null) {\n      return value;\n    }\n    return validateTypes({ value, schema });\n  } catch (error) {\n    if (JSONParseError.isInstance(error) || TypeValidationError.isInstance(error)) {\n      throw error;\n    }\n    throw new JSONParseError({ text, cause: error });\n  }\n}\nasync function safeParseJSON({\n  text,\n  schema\n}) {\n  try {\n    const value = secureJsonParse(text);\n    if (schema == null) {\n      return { success: true, value, rawValue: value };\n    }\n    return await safeValidateTypes({ value, schema });\n  } catch (error) {\n    return {\n      success: false,\n      error: JSONParseError.isInstance(error) ? error : new JSONParseError({ text, cause: error }),\n      rawValue: void 0\n    };\n  }\n}\nfunction isParsableJson(input) {\n  try {\n    secureJsonParse(input);\n    return true;\n  } catch (e) {\n    return false;\n  }\n}\nfunction parseJsonEventStream({\n  stream,\n  schema\n}) {\n  return stream.pipeThrough(new TextDecoderStream()).pipeThrough(new EventSourceParserStream()).pipeThrough(\n    new TransformStream({\n      async transform({ data }, controller) {\n        if (data === \"[DONE]\") {\n          return;\n        }\n        controller.enqueue(await safeParseJSON({ text: data, schema }));\n      }\n    })\n  );\n}\nvar getOriginalFetch2 = () => globalThis.fetch;\nvar postJsonToApi = async ({\n  url,\n  headers,\n  body,\n  failedResponseHandler,\n  successfulResponseHandler,\n  abortSignal,\n  fetch\n}) => postToApi({\n  url,\n  headers: __spreadValues({\n    \"Content-Type\": \"application/json\"\n  }, headers),\n  body: {\n    content: JSON.stringify(body),\n    values: body\n  },\n  failedResponseHandler,\n  successfulResponseHandler,\n  abortSignal,\n  fetch\n});\nvar postToApi = async ({\n  url,\n  headers = {},\n  body,\n  successfulResponseHandler,\n  failedResponseHandler,\n  abortSignal,\n  fetch = getOriginalFetch2()\n}) => {\n  try {\n    const response = await fetch(url, {\n      method: \"POST\",\n      headers: removeUndefinedEntries(headers),\n      body: body.content,\n      signal: abortSignal\n    });\n    const responseHeaders = extractResponseHeaders(response);\n    if (!response.ok) {\n      let errorInformation;\n      try {\n        errorInformation = await failedResponseHandler({\n          response,\n          url,\n          requestBodyValues: body.values\n        });\n      } catch (error) {\n        if (isAbortError(error) || APICallError.isInstance(error)) {\n          throw error;\n        }\n        throw new APICallError({\n          message: \"Failed to process error response\",\n          cause: error,\n          statusCode: response.status,\n          url,\n          responseHeaders,\n          requestBodyValues: body.values\n        });\n      }\n      throw errorInformation.value;\n    }\n    try {\n      return await successfulResponseHandler({\n        response,\n        url,\n        requestBodyValues: body.values\n      });\n    } catch (error) {\n      if (error instanceof Error) {\n        if (isAbortError(error) || APICallError.isInstance(error)) {\n          throw error;\n        }\n      }\n      throw new APICallError({\n        message: \"Failed to process successful response\",\n        cause: error,\n        statusCode: response.status,\n        url,\n        responseHeaders,\n        requestBodyValues: body.values\n      });\n    }\n  } catch (error) {\n    throw handleFetchError({ error, url, requestBodyValues: body.values });\n  }\n};\nvar createJsonErrorResponseHandler = ({\n  errorSchema,\n  errorToMessage,\n  isRetryable\n}) => async ({ response, url, requestBodyValues }) => {\n  const responseBody = await response.text();\n  const responseHeaders = extractResponseHeaders(response);\n  if (responseBody.trim() === \"\") {\n    return {\n      responseHeaders,\n      value: new APICallError({\n        message: response.statusText,\n        url,\n        requestBodyValues,\n        statusCode: response.status,\n        responseHeaders,\n        responseBody,\n        isRetryable: isRetryable == null ? void 0 : isRetryable(response)\n      })\n    };\n  }\n  try {\n    const parsedError = await parseJSON({\n      text: responseBody,\n      schema: errorSchema\n    });\n    return {\n      responseHeaders,\n      value: new APICallError({\n        message: errorToMessage(parsedError),\n        url,\n        requestBodyValues,\n        statusCode: response.status,\n        responseHeaders,\n        responseBody,\n        data: parsedError,\n        isRetryable: isRetryable == null ? void 0 : isRetryable(response, parsedError)\n      })\n    };\n  } catch (parseError) {\n    return {\n      responseHeaders,\n      value: new APICallError({\n        message: response.statusText,\n        url,\n        requestBodyValues,\n        statusCode: response.status,\n        responseHeaders,\n        responseBody,\n        isRetryable: isRetryable == null ? void 0 : isRetryable(response)\n      })\n    };\n  }\n};\nvar createEventSourceResponseHandler = (chunkSchema) => async ({ response }) => {\n  const responseHeaders = extractResponseHeaders(response);\n  if (response.body == null) {\n    throw new EmptyResponseBodyError({});\n  }\n  return {\n    responseHeaders,\n    value: parseJsonEventStream({\n      stream: response.body,\n      schema: chunkSchema\n    })\n  };\n};\nvar createJsonResponseHandler = (responseSchema) => async ({ response, url, requestBodyValues }) => {\n  const responseBody = await response.text();\n  const parsedResult = await safeParseJSON({\n    text: responseBody,\n    schema: responseSchema\n  });\n  const responseHeaders = extractResponseHeaders(response);\n  if (!parsedResult.success) {\n    throw new APICallError({\n      message: \"Invalid JSON response\",\n      cause: parsedResult.error,\n      statusCode: response.status,\n      responseHeaders,\n      responseBody,\n      url,\n      requestBodyValues\n    });\n  }\n  return {\n    responseHeaders,\n    value: parsedResult.value,\n    rawValue: parsedResult.rawValue\n  };\n};\nvar schemaSymbol = Symbol.for(\"vercel.ai.schema\");\nvar { btoa, atob } = globalThis;\nfunction convertUint8ArrayToBase64(array) {\n  let latin1string = \"\";\n  for (let i = 0; i < array.length; i++) {\n    latin1string += String.fromCodePoint(array[i]);\n  }\n  return btoa(latin1string);\n}\nfunction withoutTrailingSlash(url) {\n  return url == null ? void 0 : url.replace(/\\/$/, \"\");\n}\n\n// src/schemas/reasoning-details.ts\n\nvar ReasoningDetailSummarySchema = zod_v4__WEBPACK_IMPORTED_MODULE_0__.object({\n  type: zod_v4__WEBPACK_IMPORTED_MODULE_0__.literal(\"reasoning.summary\" /* Summary */),\n  summary: zod_v4__WEBPACK_IMPORTED_MODULE_0__.string()\n});\nvar ReasoningDetailEncryptedSchema = zod_v4__WEBPACK_IMPORTED_MODULE_0__.object({\n  type: zod_v4__WEBPACK_IMPORTED_MODULE_0__.literal(\"reasoning.encrypted\" /* Encrypted */),\n  data: zod_v4__WEBPACK_IMPORTED_MODULE_0__.string()\n});\nvar ReasoningDetailTextSchema = zod_v4__WEBPACK_IMPORTED_MODULE_0__.object({\n  type: zod_v4__WEBPACK_IMPORTED_MODULE_0__.literal(\"reasoning.text\" /* Text */),\n  text: zod_v4__WEBPACK_IMPORTED_MODULE_0__.string().nullish(),\n  signature: zod_v4__WEBPACK_IMPORTED_MODULE_0__.string().nullish()\n});\nvar ReasoningDetailUnionSchema = zod_v4__WEBPACK_IMPORTED_MODULE_0__.union([\n  ReasoningDetailSummarySchema,\n  ReasoningDetailEncryptedSchema,\n  ReasoningDetailTextSchema\n]);\nvar ReasoningDetailsWithUnknownSchema = zod_v4__WEBPACK_IMPORTED_MODULE_0__.union([\n  ReasoningDetailUnionSchema,\n  zod_v4__WEBPACK_IMPORTED_MODULE_0__.unknown().transform(() => null)\n]);\nvar ReasoningDetailArraySchema = zod_v4__WEBPACK_IMPORTED_MODULE_0__.array(ReasoningDetailsWithUnknownSchema).transform((d) => d.filter((d2) => !!d2));\n\n// src/schemas/error-response.ts\n\nvar OpenRouterErrorResponseSchema = zod_v4__WEBPACK_IMPORTED_MODULE_0__.object({\n  error: zod_v4__WEBPACK_IMPORTED_MODULE_0__.object({\n    code: zod_v4__WEBPACK_IMPORTED_MODULE_0__.union([zod_v4__WEBPACK_IMPORTED_MODULE_0__.string(), zod_v4__WEBPACK_IMPORTED_MODULE_0__.number()]).nullable().optional().default(null),\n    message: zod_v4__WEBPACK_IMPORTED_MODULE_0__.string(),\n    type: zod_v4__WEBPACK_IMPORTED_MODULE_0__.string().nullable().optional().default(null),\n    param: zod_v4__WEBPACK_IMPORTED_MODULE_0__.any().nullable().optional().default(null)\n  })\n});\nvar openrouterFailedResponseHandler = createJsonErrorResponseHandler({\n  errorSchema: OpenRouterErrorResponseSchema,\n  errorToMessage: (data) => data.error.message\n});\n\n// src/utils/map-finish-reason.ts\nfunction mapOpenRouterFinishReason(finishReason) {\n  switch (finishReason) {\n    case \"stop\":\n      return \"stop\";\n    case \"length\":\n      return \"length\";\n    case \"content_filter\":\n      return \"content-filter\";\n    case \"function_call\":\n    case \"tool_calls\":\n      return \"tool-calls\";\n    default:\n      return \"unknown\";\n  }\n}\n\n// src/chat/is-url.ts\nfunction isUrl({\n  url,\n  protocols\n}) {\n  try {\n    const urlObj = new URL(url);\n    return protocols.has(urlObj.protocol);\n  } catch (_) {\n    return false;\n  }\n}\n\n// src/chat/file-url-utils.ts\nfunction getFileUrl({\n  part,\n  defaultMediaType\n}) {\n  var _a15, _b;\n  if (part.data instanceof Uint8Array) {\n    const base64 = convertUint8ArrayToBase64(part.data);\n    return `data:${(_a15 = part.mediaType) != null ? _a15 : defaultMediaType};base64,${base64}`;\n  }\n  const stringUrl = part.data.toString();\n  if (isUrl({\n    url: stringUrl,\n    protocols: /* @__PURE__ */ new Set([\"http:\", \"https:\"])\n  })) {\n    return stringUrl;\n  }\n  return stringUrl.startsWith(\"data:\") ? stringUrl : `data:${(_b = part.mediaType) != null ? _b : defaultMediaType};base64,${stringUrl}`;\n}\n\n// src/chat/convert-to-openrouter-chat-messages.ts\nfunction getCacheControl(providerMetadata) {\n  var _a15, _b, _c;\n  const anthropic = providerMetadata == null ? void 0 : providerMetadata.anthropic;\n  const openrouter2 = providerMetadata == null ? void 0 : providerMetadata.openrouter;\n  return (_c = (_b = (_a15 = openrouter2 == null ? void 0 : openrouter2.cacheControl) != null ? _a15 : openrouter2 == null ? void 0 : openrouter2.cache_control) != null ? _b : anthropic == null ? void 0 : anthropic.cacheControl) != null ? _c : anthropic == null ? void 0 : anthropic.cache_control;\n}\nfunction convertToOpenRouterChatMessages(prompt) {\n  var _a15, _b, _c;\n  const messages = [];\n  for (const { role, content, providerOptions } of prompt) {\n    switch (role) {\n      case \"system\": {\n        messages.push({\n          role: \"system\",\n          content,\n          cache_control: getCacheControl(providerOptions)\n        });\n        break;\n      }\n      case \"user\": {\n        if (content.length === 1 && ((_a15 = content[0]) == null ? void 0 : _a15.type) === \"text\") {\n          const cacheControl = (_b = getCacheControl(providerOptions)) != null ? _b : getCacheControl(content[0].providerOptions);\n          const contentWithCacheControl = cacheControl ? [\n            {\n              type: \"text\",\n              text: content[0].text,\n              cache_control: cacheControl\n            }\n          ] : content[0].text;\n          messages.push({\n            role: \"user\",\n            content: contentWithCacheControl\n          });\n          break;\n        }\n        const messageCacheControl = getCacheControl(providerOptions);\n        const contentParts = content.map(\n          (part) => {\n            var _a16, _b2, _c2, _d, _e, _f;\n            const cacheControl = (_a16 = getCacheControl(part.providerOptions)) != null ? _a16 : messageCacheControl;\n            switch (part.type) {\n              case \"text\":\n                return {\n                  type: \"text\",\n                  text: part.text,\n                  // For text parts, only use part-specific cache control\n                  cache_control: cacheControl\n                };\n              case \"file\": {\n                if ((_b2 = part.mediaType) == null ? void 0 : _b2.startsWith(\"image/\")) {\n                  const url = getFileUrl({\n                    part,\n                    defaultMediaType: \"image/jpeg\"\n                  });\n                  return {\n                    type: \"image_url\",\n                    image_url: {\n                      url\n                    },\n                    // For image parts, use part-specific or message-level cache control\n                    cache_control: cacheControl\n                  };\n                }\n                const fileName = String(\n                  (_f = (_e = (_d = (_c2 = part.providerOptions) == null ? void 0 : _c2.openrouter) == null ? void 0 : _d.filename) != null ? _e : part.filename) != null ? _f : \"\"\n                );\n                const fileData = getFileUrl({\n                  part,\n                  defaultMediaType: \"application/pdf\"\n                });\n                if (isUrl({\n                  url: fileData,\n                  protocols: /* @__PURE__ */ new Set([\"http:\", \"https:\"])\n                })) {\n                  return {\n                    type: \"file\",\n                    file: {\n                      filename: fileName,\n                      file_data: fileData\n                    }\n                  };\n                }\n                return {\n                  type: \"file\",\n                  file: {\n                    filename: fileName,\n                    file_data: fileData\n                  },\n                  cache_control: cacheControl\n                };\n              }\n              default: {\n                return {\n                  type: \"text\",\n                  text: \"\",\n                  cache_control: cacheControl\n                };\n              }\n            }\n          }\n        );\n        messages.push({\n          role: \"user\",\n          content: contentParts\n        });\n        break;\n      }\n      case \"assistant\": {\n        let text = \"\";\n        let reasoning = \"\";\n        const reasoningDetails = [];\n        const toolCalls = [];\n        for (const part of content) {\n          switch (part.type) {\n            case \"text\": {\n              text += part.text;\n              break;\n            }\n            case \"tool-call\": {\n              toolCalls.push({\n                id: part.toolCallId,\n                type: \"function\",\n                function: {\n                  name: part.toolName,\n                  arguments: JSON.stringify(part.input)\n                }\n              });\n              break;\n            }\n            case \"reasoning\": {\n              reasoning += part.text;\n              reasoningDetails.push({\n                type: \"reasoning.text\" /* Text */,\n                text: part.text\n              });\n              break;\n            }\n            case \"file\":\n              break;\n            default: {\n              break;\n            }\n          }\n        }\n        messages.push({\n          role: \"assistant\",\n          content: text,\n          tool_calls: toolCalls.length > 0 ? toolCalls : void 0,\n          reasoning: reasoning || void 0,\n          reasoning_details: reasoningDetails.length > 0 ? reasoningDetails : void 0,\n          cache_control: getCacheControl(providerOptions)\n        });\n        break;\n      }\n      case \"tool\": {\n        for (const toolResponse of content) {\n          const content2 = getToolResultContent(toolResponse);\n          messages.push({\n            role: \"tool\",\n            tool_call_id: toolResponse.toolCallId,\n            content: content2,\n            cache_control: (_c = getCacheControl(providerOptions)) != null ? _c : getCacheControl(toolResponse.providerOptions)\n          });\n        }\n        break;\n      }\n      default: {\n        break;\n      }\n    }\n  }\n  return messages;\n}\nfunction getToolResultContent(input) {\n  return input.output.type === \"text\" ? input.output.value : JSON.stringify(input.output.value);\n}\n\n// src/chat/get-tool-choice.ts\n\nvar ChatCompletionToolChoiceSchema = zod_v4__WEBPACK_IMPORTED_MODULE_0__.union([\n  zod_v4__WEBPACK_IMPORTED_MODULE_0__.literal(\"auto\"),\n  zod_v4__WEBPACK_IMPORTED_MODULE_0__.literal(\"none\"),\n  zod_v4__WEBPACK_IMPORTED_MODULE_0__.literal(\"required\"),\n  zod_v4__WEBPACK_IMPORTED_MODULE_0__.object({\n    type: zod_v4__WEBPACK_IMPORTED_MODULE_0__.literal(\"function\"),\n    function: zod_v4__WEBPACK_IMPORTED_MODULE_0__.object({\n      name: zod_v4__WEBPACK_IMPORTED_MODULE_0__.string()\n    })\n  })\n]);\nfunction getChatCompletionToolChoice(toolChoice) {\n  switch (toolChoice.type) {\n    case \"auto\":\n    case \"none\":\n    case \"required\":\n      return toolChoice.type;\n    case \"tool\": {\n      return {\n        type: \"function\",\n        function: { name: toolChoice.toolName }\n      };\n    }\n    default: {\n      toolChoice;\n      throw new Error(`Invalid tool choice type: ${toolChoice}`);\n    }\n  }\n}\n\n// src/chat/schemas.ts\n\nvar OpenRouterChatCompletionBaseResponseSchema = zod_v4__WEBPACK_IMPORTED_MODULE_0__.object({\n  id: zod_v4__WEBPACK_IMPORTED_MODULE_0__.string().optional(),\n  model: zod_v4__WEBPACK_IMPORTED_MODULE_0__.string().optional(),\n  provider: zod_v4__WEBPACK_IMPORTED_MODULE_0__.string().optional(),\n  usage: zod_v4__WEBPACK_IMPORTED_MODULE_0__.object({\n    prompt_tokens: zod_v4__WEBPACK_IMPORTED_MODULE_0__.number(),\n    prompt_tokens_details: zod_v4__WEBPACK_IMPORTED_MODULE_0__.object({\n      cached_tokens: zod_v4__WEBPACK_IMPORTED_MODULE_0__.number()\n    }).nullish(),\n    completion_tokens: zod_v4__WEBPACK_IMPORTED_MODULE_0__.number(),\n    completion_tokens_details: zod_v4__WEBPACK_IMPORTED_MODULE_0__.object({\n      reasoning_tokens: zod_v4__WEBPACK_IMPORTED_MODULE_0__.number()\n    }).nullish(),\n    total_tokens: zod_v4__WEBPACK_IMPORTED_MODULE_0__.number(),\n    cost: zod_v4__WEBPACK_IMPORTED_MODULE_0__.number().optional(),\n    cost_details: zod_v4__WEBPACK_IMPORTED_MODULE_0__.object({\n      upstream_inference_cost: zod_v4__WEBPACK_IMPORTED_MODULE_0__.number().nullish()\n    }).nullish()\n  }).nullish()\n});\nvar OpenRouterNonStreamChatCompletionResponseSchema = OpenRouterChatCompletionBaseResponseSchema.extend({\n  choices: zod_v4__WEBPACK_IMPORTED_MODULE_0__.array(\n    zod_v4__WEBPACK_IMPORTED_MODULE_0__.object({\n      message: zod_v4__WEBPACK_IMPORTED_MODULE_0__.object({\n        role: zod_v4__WEBPACK_IMPORTED_MODULE_0__.literal(\"assistant\"),\n        content: zod_v4__WEBPACK_IMPORTED_MODULE_0__.string().nullable().optional(),\n        reasoning: zod_v4__WEBPACK_IMPORTED_MODULE_0__.string().nullable().optional(),\n        reasoning_details: ReasoningDetailArraySchema.nullish(),\n        tool_calls: zod_v4__WEBPACK_IMPORTED_MODULE_0__.array(\n          zod_v4__WEBPACK_IMPORTED_MODULE_0__.object({\n            id: zod_v4__WEBPACK_IMPORTED_MODULE_0__.string().optional().nullable(),\n            type: zod_v4__WEBPACK_IMPORTED_MODULE_0__.literal(\"function\"),\n            function: zod_v4__WEBPACK_IMPORTED_MODULE_0__.object({\n              name: zod_v4__WEBPACK_IMPORTED_MODULE_0__.string(),\n              arguments: zod_v4__WEBPACK_IMPORTED_MODULE_0__.string()\n            })\n          })\n        ).optional(),\n        annotations: zod_v4__WEBPACK_IMPORTED_MODULE_0__.array(\n          zod_v4__WEBPACK_IMPORTED_MODULE_0__.object({\n            type: zod_v4__WEBPACK_IMPORTED_MODULE_0__[\"enum\"]([\"url_citation\"]),\n            url_citation: zod_v4__WEBPACK_IMPORTED_MODULE_0__.object({\n              end_index: zod_v4__WEBPACK_IMPORTED_MODULE_0__.number(),\n              start_index: zod_v4__WEBPACK_IMPORTED_MODULE_0__.number(),\n              title: zod_v4__WEBPACK_IMPORTED_MODULE_0__.string(),\n              url: zod_v4__WEBPACK_IMPORTED_MODULE_0__.string(),\n              content: zod_v4__WEBPACK_IMPORTED_MODULE_0__.string().optional()\n            })\n          })\n        ).nullish()\n      }),\n      index: zod_v4__WEBPACK_IMPORTED_MODULE_0__.number().nullish(),\n      logprobs: zod_v4__WEBPACK_IMPORTED_MODULE_0__.object({\n        content: zod_v4__WEBPACK_IMPORTED_MODULE_0__.array(\n          zod_v4__WEBPACK_IMPORTED_MODULE_0__.object({\n            token: zod_v4__WEBPACK_IMPORTED_MODULE_0__.string(),\n            logprob: zod_v4__WEBPACK_IMPORTED_MODULE_0__.number(),\n            top_logprobs: zod_v4__WEBPACK_IMPORTED_MODULE_0__.array(\n              zod_v4__WEBPACK_IMPORTED_MODULE_0__.object({\n                token: zod_v4__WEBPACK_IMPORTED_MODULE_0__.string(),\n                logprob: zod_v4__WEBPACK_IMPORTED_MODULE_0__.number()\n              })\n            )\n          })\n        ).nullable()\n      }).nullable().optional(),\n      finish_reason: zod_v4__WEBPACK_IMPORTED_MODULE_0__.string().optional().nullable()\n    })\n  )\n});\nvar OpenRouterStreamChatCompletionChunkSchema = zod_v4__WEBPACK_IMPORTED_MODULE_0__.union([\n  OpenRouterChatCompletionBaseResponseSchema.extend({\n    choices: zod_v4__WEBPACK_IMPORTED_MODULE_0__.array(\n      zod_v4__WEBPACK_IMPORTED_MODULE_0__.object({\n        delta: zod_v4__WEBPACK_IMPORTED_MODULE_0__.object({\n          role: zod_v4__WEBPACK_IMPORTED_MODULE_0__[\"enum\"]([\"assistant\"]).optional(),\n          content: zod_v4__WEBPACK_IMPORTED_MODULE_0__.string().nullish(),\n          reasoning: zod_v4__WEBPACK_IMPORTED_MODULE_0__.string().nullish().optional(),\n          reasoning_details: ReasoningDetailArraySchema.nullish(),\n          tool_calls: zod_v4__WEBPACK_IMPORTED_MODULE_0__.array(\n            zod_v4__WEBPACK_IMPORTED_MODULE_0__.object({\n              index: zod_v4__WEBPACK_IMPORTED_MODULE_0__.number().nullish(),\n              id: zod_v4__WEBPACK_IMPORTED_MODULE_0__.string().nullish(),\n              type: zod_v4__WEBPACK_IMPORTED_MODULE_0__.literal(\"function\").optional(),\n              function: zod_v4__WEBPACK_IMPORTED_MODULE_0__.object({\n                name: zod_v4__WEBPACK_IMPORTED_MODULE_0__.string().nullish(),\n                arguments: zod_v4__WEBPACK_IMPORTED_MODULE_0__.string().nullish()\n              })\n            })\n          ).nullish(),\n          annotations: zod_v4__WEBPACK_IMPORTED_MODULE_0__.array(\n            zod_v4__WEBPACK_IMPORTED_MODULE_0__.object({\n              type: zod_v4__WEBPACK_IMPORTED_MODULE_0__[\"enum\"]([\"url_citation\"]),\n              url_citation: zod_v4__WEBPACK_IMPORTED_MODULE_0__.object({\n                end_index: zod_v4__WEBPACK_IMPORTED_MODULE_0__.number(),\n                start_index: zod_v4__WEBPACK_IMPORTED_MODULE_0__.number(),\n                title: zod_v4__WEBPACK_IMPORTED_MODULE_0__.string(),\n                url: zod_v4__WEBPACK_IMPORTED_MODULE_0__.string(),\n                content: zod_v4__WEBPACK_IMPORTED_MODULE_0__.string().optional()\n              })\n            })\n          ).nullish()\n        }).nullish(),\n        logprobs: zod_v4__WEBPACK_IMPORTED_MODULE_0__.object({\n          content: zod_v4__WEBPACK_IMPORTED_MODULE_0__.array(\n            zod_v4__WEBPACK_IMPORTED_MODULE_0__.object({\n              token: zod_v4__WEBPACK_IMPORTED_MODULE_0__.string(),\n              logprob: zod_v4__WEBPACK_IMPORTED_MODULE_0__.number(),\n              top_logprobs: zod_v4__WEBPACK_IMPORTED_MODULE_0__.array(\n                zod_v4__WEBPACK_IMPORTED_MODULE_0__.object({\n                  token: zod_v4__WEBPACK_IMPORTED_MODULE_0__.string(),\n                  logprob: zod_v4__WEBPACK_IMPORTED_MODULE_0__.number()\n                })\n              )\n            })\n          ).nullable()\n        }).nullish(),\n        finish_reason: zod_v4__WEBPACK_IMPORTED_MODULE_0__.string().nullable().optional(),\n        index: zod_v4__WEBPACK_IMPORTED_MODULE_0__.number().nullish()\n      })\n    )\n  }),\n  OpenRouterErrorResponseSchema\n]);\n\n// src/chat/index.ts\nvar OpenRouterChatLanguageModel = class {\n  constructor(modelId, settings, config) {\n    this.specificationVersion = \"v2\";\n    this.provider = \"openrouter\";\n    this.defaultObjectGenerationMode = \"tool\";\n    this.supportedUrls = {\n      \"image/*\": [\n        /^data:image\\/[a-zA-Z]+;base64,/,\n        /^https?:\\/\\/.+\\.(jpg|jpeg|png|gif|webp)$/i\n      ],\n      // 'text/*': [/^data:text\\//, /^https?:\\/\\/.+$/],\n      \"application/*\": [/^data:application\\//, /^https?:\\/\\/.+$/]\n    };\n    this.modelId = modelId;\n    this.settings = settings;\n    this.config = config;\n  }\n  getArgs({\n    prompt,\n    maxOutputTokens,\n    temperature,\n    topP,\n    frequencyPenalty,\n    presencePenalty,\n    seed,\n    stopSequences,\n    responseFormat,\n    topK,\n    tools,\n    toolChoice\n  }) {\n    var _a15;\n    const baseArgs = __spreadValues(__spreadValues({\n      // model id:\n      model: this.modelId,\n      models: this.settings.models,\n      // model specific settings:\n      logit_bias: this.settings.logitBias,\n      logprobs: this.settings.logprobs === true || typeof this.settings.logprobs === \"number\" ? true : void 0,\n      top_logprobs: typeof this.settings.logprobs === \"number\" ? this.settings.logprobs : typeof this.settings.logprobs === \"boolean\" ? this.settings.logprobs ? 0 : void 0 : void 0,\n      user: this.settings.user,\n      parallel_tool_calls: this.settings.parallelToolCalls,\n      // standardized settings:\n      max_tokens: maxOutputTokens,\n      temperature,\n      top_p: topP,\n      frequency_penalty: frequencyPenalty,\n      presence_penalty: presencePenalty,\n      seed,\n      stop: stopSequences,\n      response_format: responseFormat,\n      top_k: topK,\n      // messages:\n      messages: convertToOpenRouterChatMessages(prompt),\n      // OpenRouter specific settings:\n      include_reasoning: this.settings.includeReasoning,\n      reasoning: this.settings.reasoning,\n      usage: this.settings.usage,\n      // Web search settings:\n      plugins: this.settings.plugins,\n      web_search_options: this.settings.web_search_options,\n      // Provider routing settings:\n      provider: this.settings.provider\n    }, this.config.extraBody), this.settings.extraBody);\n    if ((responseFormat == null ? void 0 : responseFormat.type) === \"json\" && responseFormat.schema != null) {\n      return __spreadProps(__spreadValues({}, baseArgs), {\n        response_format: {\n          type: \"json_schema\",\n          json_schema: __spreadValues({\n            schema: responseFormat.schema,\n            strict: true,\n            name: (_a15 = responseFormat.name) != null ? _a15 : \"response\"\n          }, responseFormat.description && {\n            description: responseFormat.description\n          })\n        }\n      });\n    }\n    if (tools && tools.length > 0) {\n      const mappedTools = tools.filter((tool) => tool.type === \"function\").map((tool) => ({\n        type: \"function\",\n        function: {\n          name: tool.name,\n          description: tool.description,\n          parameters: tool.inputSchema\n        }\n      }));\n      return __spreadProps(__spreadValues({}, baseArgs), {\n        tools: mappedTools,\n        tool_choice: toolChoice ? getChatCompletionToolChoice(toolChoice) : void 0\n      });\n    }\n    return baseArgs;\n  }\n  async doGenerate(options) {\n    var _a15, _b, _c, _d, _e, _f, _g, _h, _i, _j, _k, _l, _m, _n, _o, _p, _q, _r, _s, _t, _u, _v, _w, _x;\n    const providerOptions = options.providerOptions || {};\n    const openrouterOptions = providerOptions.openrouter || {};\n    const args = __spreadValues(__spreadValues({}, this.getArgs(options)), openrouterOptions);\n    const { value: response, responseHeaders } = await postJsonToApi({\n      url: this.config.url({\n        path: \"/chat/completions\",\n        modelId: this.modelId\n      }),\n      headers: combineHeaders(this.config.headers(), options.headers),\n      body: args,\n      failedResponseHandler: openrouterFailedResponseHandler,\n      successfulResponseHandler: createJsonResponseHandler(\n        OpenRouterNonStreamChatCompletionResponseSchema\n      ),\n      abortSignal: options.abortSignal,\n      fetch: this.config.fetch\n    });\n    const choice = response.choices[0];\n    if (!choice) {\n      throw new Error(\"No choice in response\");\n    }\n    const usageInfo = response.usage ? {\n      inputTokens: (_a15 = response.usage.prompt_tokens) != null ? _a15 : 0,\n      outputTokens: (_b = response.usage.completion_tokens) != null ? _b : 0,\n      totalTokens: ((_c = response.usage.prompt_tokens) != null ? _c : 0) + ((_d = response.usage.completion_tokens) != null ? _d : 0),\n      reasoningTokens: (_f = (_e = response.usage.completion_tokens_details) == null ? void 0 : _e.reasoning_tokens) != null ? _f : 0,\n      cachedInputTokens: (_h = (_g = response.usage.prompt_tokens_details) == null ? void 0 : _g.cached_tokens) != null ? _h : 0\n    } : {\n      inputTokens: 0,\n      outputTokens: 0,\n      totalTokens: 0,\n      reasoningTokens: 0,\n      cachedInputTokens: 0\n    };\n    const reasoningDetails = (_i = choice.message.reasoning_details) != null ? _i : [];\n    const reasoning = reasoningDetails.length > 0 ? reasoningDetails.map((detail) => {\n      switch (detail.type) {\n        case \"reasoning.text\" /* Text */: {\n          if (detail.text) {\n            return {\n              type: \"reasoning\",\n              text: detail.text\n            };\n          }\n          break;\n        }\n        case \"reasoning.summary\" /* Summary */: {\n          if (detail.summary) {\n            return {\n              type: \"reasoning\",\n              text: detail.summary\n            };\n          }\n          break;\n        }\n        case \"reasoning.encrypted\" /* Encrypted */: {\n          if (detail.data) {\n            return {\n              type: \"reasoning\",\n              text: \"[REDACTED]\"\n            };\n          }\n          break;\n        }\n        default: {\n          detail;\n        }\n      }\n      return null;\n    }).filter((p) => p !== null) : choice.message.reasoning ? [\n      {\n        type: \"reasoning\",\n        text: choice.message.reasoning\n      }\n    ] : [];\n    const content = [];\n    content.push(...reasoning);\n    if (choice.message.content) {\n      content.push({\n        type: \"text\",\n        text: choice.message.content\n      });\n    }\n    if (choice.message.tool_calls) {\n      for (const toolCall of choice.message.tool_calls) {\n        content.push({\n          type: \"tool-call\",\n          toolCallId: (_j = toolCall.id) != null ? _j : generateId(),\n          toolName: toolCall.function.name,\n          input: toolCall.function.arguments\n        });\n      }\n    }\n    if (choice.message.annotations) {\n      for (const annotation of choice.message.annotations) {\n        if (annotation.type === \"url_citation\") {\n          content.push({\n            type: \"source\",\n            sourceType: \"url\",\n            id: annotation.url_citation.url,\n            url: annotation.url_citation.url,\n            title: annotation.url_citation.title,\n            providerMetadata: {\n              openrouter: {\n                content: annotation.url_citation.content || \"\"\n              }\n            }\n          });\n        }\n      }\n    }\n    return {\n      content,\n      finishReason: mapOpenRouterFinishReason(choice.finish_reason),\n      usage: usageInfo,\n      warnings: [],\n      providerMetadata: {\n        openrouter: {\n          provider: (_k = response.provider) != null ? _k : \"\",\n          usage: {\n            promptTokens: (_l = usageInfo.inputTokens) != null ? _l : 0,\n            completionTokens: (_m = usageInfo.outputTokens) != null ? _m : 0,\n            totalTokens: (_n = usageInfo.totalTokens) != null ? _n : 0,\n            cost: (_o = response.usage) == null ? void 0 : _o.cost,\n            promptTokensDetails: {\n              cachedTokens: (_r = (_q = (_p = response.usage) == null ? void 0 : _p.prompt_tokens_details) == null ? void 0 : _q.cached_tokens) != null ? _r : 0\n            },\n            completionTokensDetails: {\n              reasoningTokens: (_u = (_t = (_s = response.usage) == null ? void 0 : _s.completion_tokens_details) == null ? void 0 : _t.reasoning_tokens) != null ? _u : 0\n            },\n            costDetails: {\n              upstreamInferenceCost: (_x = (_w = (_v = response.usage) == null ? void 0 : _v.cost_details) == null ? void 0 : _w.upstream_inference_cost) != null ? _x : 0\n            }\n          }\n        }\n      },\n      request: { body: args },\n      response: {\n        id: response.id,\n        modelId: response.model,\n        headers: responseHeaders\n      }\n    };\n  }\n  async doStream(options) {\n    var _a15;\n    const providerOptions = options.providerOptions || {};\n    const openrouterOptions = providerOptions.openrouter || {};\n    const args = __spreadValues(__spreadValues({}, this.getArgs(options)), openrouterOptions);\n    const { value: response, responseHeaders } = await postJsonToApi({\n      url: this.config.url({\n        path: \"/chat/completions\",\n        modelId: this.modelId\n      }),\n      headers: combineHeaders(this.config.headers(), options.headers),\n      body: __spreadProps(__spreadValues({}, args), {\n        stream: true,\n        // only include stream_options when in strict compatibility mode:\n        stream_options: this.config.compatibility === \"strict\" ? __spreadValues({\n          include_usage: true\n        }, ((_a15 = this.settings.usage) == null ? void 0 : _a15.include) ? { include_usage: true } : {}) : void 0\n      }),\n      failedResponseHandler: openrouterFailedResponseHandler,\n      successfulResponseHandler: createEventSourceResponseHandler(\n        OpenRouterStreamChatCompletionChunkSchema\n      ),\n      abortSignal: options.abortSignal,\n      fetch: this.config.fetch\n    });\n    const toolCalls = [];\n    let finishReason = \"other\";\n    const usage = {\n      inputTokens: Number.NaN,\n      outputTokens: Number.NaN,\n      totalTokens: Number.NaN,\n      reasoningTokens: Number.NaN,\n      cachedInputTokens: Number.NaN\n    };\n    const openrouterUsage = {};\n    let textStarted = false;\n    let reasoningStarted = false;\n    let textId;\n    let reasoningId;\n    let openrouterResponseId;\n    let provider;\n    return {\n      stream: response.pipeThrough(\n        new TransformStream({\n          transform(chunk, controller) {\n            var _a16, _b, _c, _d, _e, _f, _g, _h, _i, _j, _k, _l, _m, _n;\n            if (!chunk.success) {\n              finishReason = \"error\";\n              controller.enqueue({ type: \"error\", error: chunk.error });\n              return;\n            }\n            const value = chunk.value;\n            if (\"error\" in value) {\n              finishReason = \"error\";\n              controller.enqueue({ type: \"error\", error: value.error });\n              return;\n            }\n            if (value.provider) {\n              provider = value.provider;\n            }\n            if (value.id) {\n              openrouterResponseId = value.id;\n              controller.enqueue({\n                type: \"response-metadata\",\n                id: value.id\n              });\n            }\n            if (value.model) {\n              controller.enqueue({\n                type: \"response-metadata\",\n                modelId: value.model\n              });\n            }\n            if (value.usage != null) {\n              usage.inputTokens = value.usage.prompt_tokens;\n              usage.outputTokens = value.usage.completion_tokens;\n              usage.totalTokens = value.usage.prompt_tokens + value.usage.completion_tokens;\n              openrouterUsage.promptTokens = value.usage.prompt_tokens;\n              if (value.usage.prompt_tokens_details) {\n                const cachedInputTokens = (_a16 = value.usage.prompt_tokens_details.cached_tokens) != null ? _a16 : 0;\n                usage.cachedInputTokens = cachedInputTokens;\n                openrouterUsage.promptTokensDetails = {\n                  cachedTokens: cachedInputTokens\n                };\n              }\n              openrouterUsage.completionTokens = value.usage.completion_tokens;\n              if (value.usage.completion_tokens_details) {\n                const reasoningTokens = (_b = value.usage.completion_tokens_details.reasoning_tokens) != null ? _b : 0;\n                usage.reasoningTokens = reasoningTokens;\n                openrouterUsage.completionTokensDetails = {\n                  reasoningTokens\n                };\n              }\n              openrouterUsage.cost = value.usage.cost;\n              openrouterUsage.totalTokens = value.usage.total_tokens;\n            }\n            const choice = value.choices[0];\n            if ((choice == null ? void 0 : choice.finish_reason) != null) {\n              finishReason = mapOpenRouterFinishReason(choice.finish_reason);\n            }\n            if ((choice == null ? void 0 : choice.delta) == null) {\n              return;\n            }\n            const delta = choice.delta;\n            const emitReasoningChunk = (chunkText) => {\n              if (!reasoningStarted) {\n                reasoningId = openrouterResponseId || generateId();\n                controller.enqueue({\n                  type: \"reasoning-start\",\n                  id: reasoningId\n                });\n                reasoningStarted = true;\n              }\n              controller.enqueue({\n                type: \"reasoning-delta\",\n                delta: chunkText,\n                id: reasoningId || generateId()\n              });\n            };\n            if (delta.reasoning_details && delta.reasoning_details.length > 0) {\n              for (const detail of delta.reasoning_details) {\n                switch (detail.type) {\n                  case \"reasoning.text\" /* Text */: {\n                    if (detail.text) {\n                      emitReasoningChunk(detail.text);\n                    }\n                    break;\n                  }\n                  case \"reasoning.encrypted\" /* Encrypted */: {\n                    if (detail.data) {\n                      emitReasoningChunk(\"[REDACTED]\");\n                    }\n                    break;\n                  }\n                  case \"reasoning.summary\" /* Summary */: {\n                    if (detail.summary) {\n                      emitReasoningChunk(detail.summary);\n                    }\n                    break;\n                  }\n                  default: {\n                    detail;\n                    break;\n                  }\n                }\n              }\n            } else if (delta.reasoning) {\n              emitReasoningChunk(delta.reasoning);\n            }\n            if (delta.content) {\n              if (reasoningStarted && !textStarted) {\n                controller.enqueue({\n                  type: \"reasoning-end\",\n                  id: reasoningId || generateId()\n                });\n                reasoningStarted = false;\n              }\n              if (!textStarted) {\n                textId = openrouterResponseId || generateId();\n                controller.enqueue({\n                  type: \"text-start\",\n                  id: textId\n                });\n                textStarted = true;\n              }\n              controller.enqueue({\n                type: \"text-delta\",\n                delta: delta.content,\n                id: textId || generateId()\n              });\n            }\n            if (delta.annotations) {\n              for (const annotation of delta.annotations) {\n                if (annotation.type === \"url_citation\") {\n                  controller.enqueue({\n                    type: \"source\",\n                    sourceType: \"url\",\n                    id: annotation.url_citation.url,\n                    url: annotation.url_citation.url,\n                    title: annotation.url_citation.title,\n                    providerMetadata: {\n                      openrouter: {\n                        content: annotation.url_citation.content || \"\"\n                      }\n                    }\n                  });\n                }\n              }\n            }\n            if (delta.tool_calls != null) {\n              for (const toolCallDelta of delta.tool_calls) {\n                const index = (_c = toolCallDelta.index) != null ? _c : toolCalls.length - 1;\n                if (toolCalls[index] == null) {\n                  if (toolCallDelta.type !== \"function\") {\n                    throw new InvalidResponseDataError({\n                      data: toolCallDelta,\n                      message: `Expected 'function' type.`\n                    });\n                  }\n                  if (toolCallDelta.id == null) {\n                    throw new InvalidResponseDataError({\n                      data: toolCallDelta,\n                      message: `Expected 'id' to be a string.`\n                    });\n                  }\n                  if (((_d = toolCallDelta.function) == null ? void 0 : _d.name) == null) {\n                    throw new InvalidResponseDataError({\n                      data: toolCallDelta,\n                      message: `Expected 'function.name' to be a string.`\n                    });\n                  }\n                  toolCalls[index] = {\n                    id: toolCallDelta.id,\n                    type: \"function\",\n                    function: {\n                      name: toolCallDelta.function.name,\n                      arguments: (_e = toolCallDelta.function.arguments) != null ? _e : \"\"\n                    },\n                    inputStarted: false,\n                    sent: false\n                  };\n                  const toolCall2 = toolCalls[index];\n                  if (toolCall2 == null) {\n                    throw new Error(\"Tool call is missing\");\n                  }\n                  if (((_f = toolCall2.function) == null ? void 0 : _f.name) != null && ((_g = toolCall2.function) == null ? void 0 : _g.arguments) != null && isParsableJson(toolCall2.function.arguments)) {\n                    toolCall2.inputStarted = true;\n                    controller.enqueue({\n                      type: \"tool-input-start\",\n                      id: toolCall2.id,\n                      toolName: toolCall2.function.name\n                    });\n                    controller.enqueue({\n                      type: \"tool-input-delta\",\n                      id: toolCall2.id,\n                      delta: toolCall2.function.arguments\n                    });\n                    controller.enqueue({\n                      type: \"tool-input-end\",\n                      id: toolCall2.id\n                    });\n                    controller.enqueue({\n                      type: \"tool-call\",\n                      toolCallId: toolCall2.id,\n                      toolName: toolCall2.function.name,\n                      input: toolCall2.function.arguments\n                    });\n                    toolCall2.sent = true;\n                  }\n                  continue;\n                }\n                const toolCall = toolCalls[index];\n                if (toolCall == null) {\n                  throw new Error(\"Tool call is missing\");\n                }\n                if (!toolCall.inputStarted) {\n                  toolCall.inputStarted = true;\n                  controller.enqueue({\n                    type: \"tool-input-start\",\n                    id: toolCall.id,\n                    toolName: toolCall.function.name\n                  });\n                }\n                if (((_h = toolCallDelta.function) == null ? void 0 : _h.arguments) != null) {\n                  toolCall.function.arguments += (_j = (_i = toolCallDelta.function) == null ? void 0 : _i.arguments) != null ? _j : \"\";\n                }\n                controller.enqueue({\n                  type: \"tool-input-delta\",\n                  id: toolCall.id,\n                  delta: (_k = toolCallDelta.function.arguments) != null ? _k : \"\"\n                });\n                if (((_l = toolCall.function) == null ? void 0 : _l.name) != null && ((_m = toolCall.function) == null ? void 0 : _m.arguments) != null && isParsableJson(toolCall.function.arguments)) {\n                  controller.enqueue({\n                    type: \"tool-call\",\n                    toolCallId: (_n = toolCall.id) != null ? _n : generateId(),\n                    toolName: toolCall.function.name,\n                    input: toolCall.function.arguments\n                  });\n                  toolCall.sent = true;\n                }\n              }\n            }\n          },\n          flush(controller) {\n            var _a16;\n            if (finishReason === \"tool-calls\") {\n              for (const toolCall of toolCalls) {\n                if (toolCall && !toolCall.sent) {\n                  controller.enqueue({\n                    type: \"tool-call\",\n                    toolCallId: (_a16 = toolCall.id) != null ? _a16 : generateId(),\n                    toolName: toolCall.function.name,\n                    // Coerce invalid arguments to an empty JSON object\n                    input: isParsableJson(toolCall.function.arguments) ? toolCall.function.arguments : \"{}\"\n                  });\n                  toolCall.sent = true;\n                }\n              }\n            }\n            if (reasoningStarted) {\n              controller.enqueue({\n                type: \"reasoning-end\",\n                id: reasoningId || generateId()\n              });\n            }\n            if (textStarted) {\n              controller.enqueue({\n                type: \"text-end\",\n                id: textId || generateId()\n              });\n            }\n            const openrouterMetadata = {\n              usage: openrouterUsage\n            };\n            if (provider !== void 0) {\n              openrouterMetadata.provider = provider;\n            }\n            controller.enqueue({\n              type: \"finish\",\n              finishReason,\n              usage,\n              providerMetadata: {\n                openrouter: openrouterMetadata\n              }\n            });\n          }\n        })\n      ),\n      warnings: [],\n      request: { body: args },\n      response: { headers: responseHeaders }\n    };\n  }\n};\n\n// src/completion/convert-to-openrouter-completion-prompt.ts\nfunction convertToOpenRouterCompletionPrompt({\n  prompt,\n  inputFormat,\n  user = \"user\",\n  assistant = \"assistant\"\n}) {\n  if (inputFormat === \"prompt\" && prompt.length === 1 && prompt[0] && prompt[0].role === \"user\" && prompt[0].content.length === 1 && prompt[0].content[0] && prompt[0].content[0].type === \"text\") {\n    return { prompt: prompt[0].content[0].text };\n  }\n  let text = \"\";\n  if (prompt[0] && prompt[0].role === \"system\") {\n    text += `${prompt[0].content}\n\n`;\n    prompt = prompt.slice(1);\n  }\n  for (const { role, content } of prompt) {\n    switch (role) {\n      case \"system\": {\n        throw new InvalidPromptError({\n          message: `Unexpected system message in prompt: ${content}`,\n          prompt\n        });\n      }\n      case \"user\": {\n        const userMessage = content.map((part) => {\n          switch (part.type) {\n            case \"text\": {\n              return part.text;\n            }\n            case \"file\": {\n              throw new UnsupportedFunctionalityError({\n                functionality: \"file attachments\"\n              });\n            }\n            default: {\n              return \"\";\n            }\n          }\n        }).join(\"\");\n        text += `${user}:\n${userMessage}\n\n`;\n        break;\n      }\n      case \"assistant\": {\n        const assistantMessage = content.map(\n          (part) => {\n            switch (part.type) {\n              case \"text\": {\n                return part.text;\n              }\n              case \"tool-call\": {\n                throw new UnsupportedFunctionalityError({\n                  functionality: \"tool-call messages\"\n                });\n              }\n              case \"tool-result\": {\n                throw new UnsupportedFunctionalityError({\n                  functionality: \"tool-result messages\"\n                });\n              }\n              case \"reasoning\": {\n                throw new UnsupportedFunctionalityError({\n                  functionality: \"reasoning messages\"\n                });\n              }\n              case \"file\": {\n                throw new UnsupportedFunctionalityError({\n                  functionality: \"file attachments\"\n                });\n              }\n              default: {\n                return \"\";\n              }\n            }\n          }\n        ).join(\"\");\n        text += `${assistant}:\n${assistantMessage}\n\n`;\n        break;\n      }\n      case \"tool\": {\n        throw new UnsupportedFunctionalityError({\n          functionality: \"tool messages\"\n        });\n      }\n      default: {\n        break;\n      }\n    }\n  }\n  text += `${assistant}:\n`;\n  return {\n    prompt: text\n  };\n}\n\n// src/completion/schemas.ts\n\nvar OpenRouterCompletionChunkSchema = zod_v4__WEBPACK_IMPORTED_MODULE_0__.union([\n  zod_v4__WEBPACK_IMPORTED_MODULE_0__.object({\n    id: zod_v4__WEBPACK_IMPORTED_MODULE_0__.string().optional(),\n    model: zod_v4__WEBPACK_IMPORTED_MODULE_0__.string().optional(),\n    choices: zod_v4__WEBPACK_IMPORTED_MODULE_0__.array(\n      zod_v4__WEBPACK_IMPORTED_MODULE_0__.object({\n        text: zod_v4__WEBPACK_IMPORTED_MODULE_0__.string(),\n        reasoning: zod_v4__WEBPACK_IMPORTED_MODULE_0__.string().nullish().optional(),\n        reasoning_details: ReasoningDetailArraySchema.nullish(),\n        finish_reason: zod_v4__WEBPACK_IMPORTED_MODULE_0__.string().nullish(),\n        index: zod_v4__WEBPACK_IMPORTED_MODULE_0__.number().nullish(),\n        logprobs: zod_v4__WEBPACK_IMPORTED_MODULE_0__.object({\n          tokens: zod_v4__WEBPACK_IMPORTED_MODULE_0__.array(zod_v4__WEBPACK_IMPORTED_MODULE_0__.string()),\n          token_logprobs: zod_v4__WEBPACK_IMPORTED_MODULE_0__.array(zod_v4__WEBPACK_IMPORTED_MODULE_0__.number()),\n          top_logprobs: zod_v4__WEBPACK_IMPORTED_MODULE_0__.array(zod_v4__WEBPACK_IMPORTED_MODULE_0__.record(zod_v4__WEBPACK_IMPORTED_MODULE_0__.string(), zod_v4__WEBPACK_IMPORTED_MODULE_0__.number())).nullable()\n        }).nullable().optional()\n      })\n    ),\n    usage: zod_v4__WEBPACK_IMPORTED_MODULE_0__.object({\n      prompt_tokens: zod_v4__WEBPACK_IMPORTED_MODULE_0__.number(),\n      prompt_tokens_details: zod_v4__WEBPACK_IMPORTED_MODULE_0__.object({\n        cached_tokens: zod_v4__WEBPACK_IMPORTED_MODULE_0__.number()\n      }).nullish(),\n      completion_tokens: zod_v4__WEBPACK_IMPORTED_MODULE_0__.number(),\n      completion_tokens_details: zod_v4__WEBPACK_IMPORTED_MODULE_0__.object({\n        reasoning_tokens: zod_v4__WEBPACK_IMPORTED_MODULE_0__.number()\n      }).nullish(),\n      total_tokens: zod_v4__WEBPACK_IMPORTED_MODULE_0__.number(),\n      cost: zod_v4__WEBPACK_IMPORTED_MODULE_0__.number().optional()\n    }).nullish()\n  }),\n  OpenRouterErrorResponseSchema\n]);\n\n// src/completion/index.ts\nvar OpenRouterCompletionLanguageModel = class {\n  constructor(modelId, settings, config) {\n    this.specificationVersion = \"v2\";\n    this.provider = \"openrouter\";\n    this.supportedUrls = {\n      \"image/*\": [\n        /^data:image\\/[a-zA-Z]+;base64,/,\n        /^https?:\\/\\/.+\\.(jpg|jpeg|png|gif|webp)$/i\n      ],\n      \"text/*\": [/^data:text\\//, /^https?:\\/\\/.+$/],\n      \"application/*\": [/^data:application\\//, /^https?:\\/\\/.+$/]\n    };\n    this.defaultObjectGenerationMode = void 0;\n    this.modelId = modelId;\n    this.settings = settings;\n    this.config = config;\n  }\n  getArgs({\n    prompt,\n    maxOutputTokens,\n    temperature,\n    topP,\n    frequencyPenalty,\n    presencePenalty,\n    seed,\n    responseFormat,\n    topK,\n    stopSequences,\n    tools,\n    toolChoice\n  }) {\n    const { prompt: completionPrompt } = convertToOpenRouterCompletionPrompt({\n      prompt,\n      inputFormat: \"prompt\"\n    });\n    if (tools == null ? void 0 : tools.length) {\n      throw new UnsupportedFunctionalityError({\n        functionality: \"tools\"\n      });\n    }\n    if (toolChoice) {\n      throw new UnsupportedFunctionalityError({\n        functionality: \"toolChoice\"\n      });\n    }\n    return __spreadValues(__spreadValues({\n      // model id:\n      model: this.modelId,\n      models: this.settings.models,\n      // model specific settings:\n      logit_bias: this.settings.logitBias,\n      logprobs: typeof this.settings.logprobs === \"number\" ? this.settings.logprobs : typeof this.settings.logprobs === \"boolean\" ? this.settings.logprobs ? 0 : void 0 : void 0,\n      suffix: this.settings.suffix,\n      user: this.settings.user,\n      // standardized settings:\n      max_tokens: maxOutputTokens,\n      temperature,\n      top_p: topP,\n      frequency_penalty: frequencyPenalty,\n      presence_penalty: presencePenalty,\n      seed,\n      stop: stopSequences,\n      response_format: responseFormat,\n      top_k: topK,\n      // prompt:\n      prompt: completionPrompt,\n      // OpenRouter specific settings:\n      include_reasoning: this.settings.includeReasoning,\n      reasoning: this.settings.reasoning\n    }, this.config.extraBody), this.settings.extraBody);\n  }\n  async doGenerate(options) {\n    var _a15, _b, _c, _d, _e, _f, _g, _h, _i, _j, _k, _l, _m, _n, _o;\n    const providerOptions = options.providerOptions || {};\n    const openrouterOptions = providerOptions.openrouter || {};\n    const args = __spreadValues(__spreadValues({}, this.getArgs(options)), openrouterOptions);\n    const { value: response, responseHeaders } = await postJsonToApi({\n      url: this.config.url({\n        path: \"/completions\",\n        modelId: this.modelId\n      }),\n      headers: combineHeaders(this.config.headers(), options.headers),\n      body: args,\n      failedResponseHandler: openrouterFailedResponseHandler,\n      successfulResponseHandler: createJsonResponseHandler(\n        OpenRouterCompletionChunkSchema\n      ),\n      abortSignal: options.abortSignal,\n      fetch: this.config.fetch\n    });\n    if (\"error\" in response) {\n      throw new Error(`${response.error.message}`);\n    }\n    const choice = response.choices[0];\n    if (!choice) {\n      throw new Error(\"No choice in OpenRouter completion response\");\n    }\n    return {\n      content: [\n        {\n          type: \"text\",\n          text: (_a15 = choice.text) != null ? _a15 : \"\"\n        }\n      ],\n      finishReason: mapOpenRouterFinishReason(choice.finish_reason),\n      usage: {\n        inputTokens: (_c = (_b = response.usage) == null ? void 0 : _b.prompt_tokens) != null ? _c : 0,\n        outputTokens: (_e = (_d = response.usage) == null ? void 0 : _d.completion_tokens) != null ? _e : 0,\n        totalTokens: ((_g = (_f = response.usage) == null ? void 0 : _f.prompt_tokens) != null ? _g : 0) + ((_i = (_h = response.usage) == null ? void 0 : _h.completion_tokens) != null ? _i : 0),\n        reasoningTokens: (_l = (_k = (_j = response.usage) == null ? void 0 : _j.completion_tokens_details) == null ? void 0 : _k.reasoning_tokens) != null ? _l : 0,\n        cachedInputTokens: (_o = (_n = (_m = response.usage) == null ? void 0 : _m.prompt_tokens_details) == null ? void 0 : _n.cached_tokens) != null ? _o : 0\n      },\n      warnings: [],\n      response: {\n        headers: responseHeaders\n      }\n    };\n  }\n  async doStream(options) {\n    const providerOptions = options.providerOptions || {};\n    const openrouterOptions = providerOptions.openrouter || {};\n    const args = __spreadValues(__spreadValues({}, this.getArgs(options)), openrouterOptions);\n    const { value: response, responseHeaders } = await postJsonToApi({\n      url: this.config.url({\n        path: \"/completions\",\n        modelId: this.modelId\n      }),\n      headers: combineHeaders(this.config.headers(), options.headers),\n      body: __spreadProps(__spreadValues({}, args), {\n        stream: true,\n        // only include stream_options when in strict compatibility mode:\n        stream_options: this.config.compatibility === \"strict\" ? { include_usage: true } : void 0\n      }),\n      failedResponseHandler: openrouterFailedResponseHandler,\n      successfulResponseHandler: createEventSourceResponseHandler(\n        OpenRouterCompletionChunkSchema\n      ),\n      abortSignal: options.abortSignal,\n      fetch: this.config.fetch\n    });\n    let finishReason = \"other\";\n    const usage = {\n      inputTokens: Number.NaN,\n      outputTokens: Number.NaN,\n      totalTokens: Number.NaN,\n      reasoningTokens: Number.NaN,\n      cachedInputTokens: Number.NaN\n    };\n    const openrouterUsage = {};\n    return {\n      stream: response.pipeThrough(\n        new TransformStream({\n          transform(chunk, controller) {\n            var _a15, _b;\n            if (!chunk.success) {\n              finishReason = \"error\";\n              controller.enqueue({ type: \"error\", error: chunk.error });\n              return;\n            }\n            const value = chunk.value;\n            if (\"error\" in value) {\n              finishReason = \"error\";\n              controller.enqueue({ type: \"error\", error: value.error });\n              return;\n            }\n            if (value.usage != null) {\n              usage.inputTokens = value.usage.prompt_tokens;\n              usage.outputTokens = value.usage.completion_tokens;\n              usage.totalTokens = value.usage.prompt_tokens + value.usage.completion_tokens;\n              openrouterUsage.promptTokens = value.usage.prompt_tokens;\n              if (value.usage.prompt_tokens_details) {\n                const cachedInputTokens = (_a15 = value.usage.prompt_tokens_details.cached_tokens) != null ? _a15 : 0;\n                usage.cachedInputTokens = cachedInputTokens;\n                openrouterUsage.promptTokensDetails = {\n                  cachedTokens: cachedInputTokens\n                };\n              }\n              openrouterUsage.completionTokens = value.usage.completion_tokens;\n              if (value.usage.completion_tokens_details) {\n                const reasoningTokens = (_b = value.usage.completion_tokens_details.reasoning_tokens) != null ? _b : 0;\n                usage.reasoningTokens = reasoningTokens;\n                openrouterUsage.completionTokensDetails = {\n                  reasoningTokens\n                };\n              }\n              openrouterUsage.cost = value.usage.cost;\n              openrouterUsage.totalTokens = value.usage.total_tokens;\n            }\n            const choice = value.choices[0];\n            if ((choice == null ? void 0 : choice.finish_reason) != null) {\n              finishReason = mapOpenRouterFinishReason(choice.finish_reason);\n            }\n            if ((choice == null ? void 0 : choice.text) != null) {\n              controller.enqueue({\n                type: \"text-delta\",\n                delta: choice.text,\n                id: generateId()\n              });\n            }\n          },\n          flush(controller) {\n            controller.enqueue({\n              type: \"finish\",\n              finishReason,\n              usage,\n              providerMetadata: {\n                openrouter: {\n                  usage: openrouterUsage\n                }\n              }\n            });\n          }\n        })\n      ),\n      response: {\n        headers: responseHeaders\n      }\n    };\n  }\n};\n\n// src/facade.ts\nvar OpenRouter = class {\n  /**\n   * Creates a new OpenRouter provider instance.\n   */\n  constructor(options = {}) {\n    var _a15, _b;\n    this.baseURL = (_b = withoutTrailingSlash((_a15 = options.baseURL) != null ? _a15 : options.baseUrl)) != null ? _b : \"https://openrouter.ai/api/v1\";\n    this.apiKey = options.apiKey;\n    this.headers = options.headers;\n  }\n  get baseConfig() {\n    return {\n      baseURL: this.baseURL,\n      headers: () => __spreadValues({\n        Authorization: `Bearer ${loadApiKey({\n          apiKey: this.apiKey,\n          environmentVariableName: \"OPENROUTER_API_KEY\",\n          description: \"OpenRouter\"\n        })}`\n      }, this.headers)\n    };\n  }\n  chat(modelId, settings = {}) {\n    return new OpenRouterChatLanguageModel(modelId, settings, __spreadProps(__spreadValues({\n      provider: \"openrouter.chat\"\n    }, this.baseConfig), {\n      compatibility: \"strict\",\n      url: ({ path }) => `${this.baseURL}${path}`\n    }));\n  }\n  completion(modelId, settings = {}) {\n    return new OpenRouterCompletionLanguageModel(modelId, settings, __spreadProps(__spreadValues({\n      provider: \"openrouter.completion\"\n    }, this.baseConfig), {\n      compatibility: \"strict\",\n      url: ({ path }) => `${this.baseURL}${path}`\n    }));\n  }\n};\n\n// src/provider.ts\nfunction createOpenRouter(options = {}) {\n  var _a15, _b, _c;\n  const baseURL = (_b = withoutTrailingSlash((_a15 = options.baseURL) != null ? _a15 : options.baseUrl)) != null ? _b : \"https://openrouter.ai/api/v1\";\n  const compatibility = (_c = options.compatibility) != null ? _c : \"compatible\";\n  const getHeaders = () => __spreadValues({\n    Authorization: `Bearer ${loadApiKey({\n      apiKey: options.apiKey,\n      environmentVariableName: \"OPENROUTER_API_KEY\",\n      description: \"OpenRouter\"\n    })}`\n  }, options.headers);\n  const createChatModel = (modelId, settings = {}) => new OpenRouterChatLanguageModel(modelId, settings, {\n    provider: \"openrouter.chat\",\n    url: ({ path }) => `${baseURL}${path}`,\n    headers: getHeaders,\n    compatibility,\n    fetch: options.fetch,\n    extraBody: options.extraBody\n  });\n  const createCompletionModel = (modelId, settings = {}) => new OpenRouterCompletionLanguageModel(modelId, settings, {\n    provider: \"openrouter.completion\",\n    url: ({ path }) => `${baseURL}${path}`,\n    headers: getHeaders,\n    compatibility,\n    fetch: options.fetch,\n    extraBody: options.extraBody\n  });\n  const createLanguageModel = (modelId, settings) => {\n    if (new.target) {\n      throw new Error(\n        \"The OpenRouter model function cannot be called with the new keyword.\"\n      );\n    }\n    if (modelId === \"openai/gpt-3.5-turbo-instruct\") {\n      return createCompletionModel(\n        modelId,\n        settings\n      );\n    }\n    return createChatModel(modelId, settings);\n  };\n  const provider = (modelId, settings) => createLanguageModel(modelId, settings);\n  provider.languageModel = createLanguageModel;\n  provider.chat = createChatModel;\n  provider.completion = createCompletionModel;\n  return provider;\n}\nvar openrouter = createOpenRouter({\n  compatibility: \"strict\"\n  // strict for OpenRouter API\n});\n\n//# sourceMappingURL=index.mjs.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/../node_modules/.pnpm/@openrouter+ai-sdk-provider_cc067f969ca6f2d6fe755f9c943e4cee/node_modules/@openrouter/ai-sdk-provider/dist/index.mjs\n");

/***/ })

};
;